---
layout: post
title:  "kChat - Chat application using Kafka and Blazor - Part 2"
date:   2021-08-30 08:52:17 +1000
categories: kafka blazor
tags: kafka blazor docker container C#
author: Talal Tayyab
---
This is part-2 of a series of articles on creating a chat application using Kafka and Blazor.

## What will we cover

The list of topics is as follows.

1. [Getting Kafka Instance]({% post_url 2021-08-29-kchat-part-1 %})
1. **Creating the Blazor app**
1. Creating Kafka Producer and Consumer
1. Containerizing the application

## Blazor app

<a href="https://github.com/TalalTayyab/Kchat/tree/first" class="btn btn-github"><span class="icon"></span>View code on GitHub for part 2</a>

We are going to create a simple chat layout. First step is to create a new Blazor app using the `Blazor Server App` template. For more information on hosting models, read about those at [ASP.NET Core Blazor hosting models](https://docs.microsoft.com/en-us/aspnet/core/blazor/hosting-models?view=aspnetcore-5.0). In summary,

`With the Blazor Server hosting model, the app is executed on the server from within an ASP.NET Core app. UI updates, event handling, and JavaScript calls are handled over a SignalR connection.`

The structure of our app is simple. We will add a new razor page called `chat`. This is going to represent our page.

![kchat]({{ site.url }}/assets/kchat.png)

There is no interaction with Kafka at this stage. This is a bare bones Razor website. Clicking on the Send button calls the `SendMessage` function, which just appends the message to `_txtareaMessages` which is bound to the `<textarea>` control.
{% highlight HTML %}
<button class="btn btn-primary" @onclick="SendMessage">Send</button>

...

<textarea style="width:100%;height:60vh;overflow:scroll; " @bind="_txtareaMessages" readonly></textarea>
{% endhighlight %}

{% highlight C# %}
private void SendMessage()
{
    if (string.IsNullOrEmpty(_txtMessage))
    {
        return;
    }

    _txtareaMessages += _txtMessage + Environment.NewLine;
    _txtMessage = string.Empty;
}
{% endhighlight %}

**Tip**: Since Blazor establishes a connection over Signal-R you won't see normal HTML network traffic in developer tools. However if you enable WebSocket you can see the binary messages going between the server and client. See this stackoverflow [question](https://stackoverflow.com/questions/29771676/cant-see-signalr-traffic-in-browser-development-tools).


[jekyll-docs]: https://jekyllrb.com/docs/home
[jekyll-gh]:   https://github.com/jekyll/jekyll
[jekyll-talk]: https://talk.jekyllrb.com/
